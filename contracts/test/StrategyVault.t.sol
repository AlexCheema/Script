// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.6;
pragma abicoder v2;

import "forge-std/Test.sol";
import "../src/StrategyVault.sol";
import "@uniswap/v3-core/contracts/UniswapV3Pool.sol";
import "@uniswap/v3-core/contracts/UniswapV3Factory.sol";
import "@uniswap/v3-core/contracts/libraries/TickMath.sol";
import "./TestERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract StrategyVaultTest is Test {
    uint256[24] proof = [
        0x1f32056b09cd24e7792853d91be6cdb061b328a0caf8229f13c1396c1cc8028e,
        0x22721f4edaf9bc0ce41f9deaae00ccb7fa515cc2193d3dfda76997b3612f8085,
        0x2b86c568483db50a38d6bc97b6b3d82b9c07f0c51fdecddcdb219591d62e17b8,
        0x1fd77a03b1fecc755355f4d9102ece0c6f08e1c8661a90085ffec34b2cb1f609,
        0x086b584b0af4bd559af46cf3049c41a19457a83b9454cafe6d11f4e91049169f,
        0x25c09fdb8fe61c69cda08027e358618af3a8db0c73b48cc865672c4603d45b24,
        0x221678db6e539686d7c9e6dc1de5644a1a4564e459aa969aefe3f32c7d199166,
        0x0b27ee53f955c5be5b639434c7e968944785d94ebcdecaa23a7e306eed3e70cc,
        0x1acad18d990cbe53ab016f5e5d9cd170a84852f715f57a6864e3b99d7d1d2071,
        0x1883460b23911f6706364275a3456dec17036dbd9c8973b4afac562e399e676d,
        0x1a3312dce44e830a962a16424d14b0c0aa30e7082c499cc5947e6926b322971d,
        0x23d9278fbecaeb8533a60cb5a4bac3fbb2efd910167a599e0ebc2ec41508056b,
        0x1f6ea3ac47d40017aa5dad2a4450b180b4af547bd4c4ab8b887997cf334d6320,
        0x1a6065fd4661e182e56432be508a72d2cb1ffc02b8e2fe33356fda81e03e605c,
        0x2605c05f38d9fe6d2def499ab92bc45141f4a813929b4dc0722a1194e5d7de57,
        0x2d5d6b6b0bbd86f033b96cd6faa14956cef240cda3a436e724f3d49d1a5ad535,
        0x157f6cac075631f14e6ec8498ccefec26938f716d3e4cdf1dc77490c242a5f89,
        0x03ab249b2562d0fda4dedef047b4545dd46ba2f3f9f0f18f6e09eb7d8009f991,
        0x09f7f1f0bae09c9541ad7fe0c6d15d7227e70fbf8199458f1bafdd0fd34159fc,
        0x1a565728ea75f4251605c8064159aeed0d00b42ef630b65968df3a2a02d05522,
        0x29da4d675041e5115bdf44d2a64f1bae8754de61eed0637d80282c6a5fd0557b,
        0x073bc14d7c632092ab5f4943c769495277185ed086dde2ef233737dda27f7168,
        0x1067bf1d81550b0e6496e15e16a5aeb5c60250c8c8ffd476f65b4dd6c9d056a6,
        0x1040f0865e1acc1a9167b11f4c8472acf5502cfdc6e1655650b5bc6bbb2992cd
    ];

    uint256[36] publicSignals = [
        0x0000000000000000000000000000000000000000000000000000000000000002,
        0x000000000000000000000000000000000000000000000000000000000002eef0,
        0x000000000000000000000000000000000000000000000000000000000002ef2c,
        0x0000000000000000000000000000000000000000000000000003fe38e17a5c13,
        0x0000000000000000000000000000000000000000000000000000000000000001,
        0x00000000000000000000000000000000000000000000000000000000000167ef,
        0x000000000000000000000000000000000000000000000000000000000001682b,
        0x0000000000000000000000000000000000000000000000000003fe38e1899e53,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x00000000000000000000000000000000000000000000000000000000000167ef,
        0x000000000000000000000000000000000000000000000000000000000002eef0,
        0x0000000000000000000000000000000000000000000000000003fe38e17a5c13,
        0x00000000000000000000000000000000000000000000000000000000000f4240
    ];

    StrategyVault vault;
    PlonkVerifier verifier;
    UniswapV3Factory factory;
    UniswapV3PoolDeployer deployer;
    UniswapV3Pool pool;
    Token0 token0;
    Token1 token1;

    function setUp() public {
        factory = new UniswapV3Factory();
        token0 = new Token0();
        token1 = new Token1();
        pool = UniswapV3Pool(factory.createPool(address(token0), address(token1), 500));
        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(92143);
        // Match tick from public signals
        pool.initialize(sqrtPriceX96);

        verifier = new PlonkVerifier();
        vault = new StrategyVault(address(verifier), address(pool), address(token0), address(token1));
    }

    function test_verifyActions() public view {
        vault.verifyActions(proof, publicSignals);
    }

    function test_callback() public {
        vm.prank(address(vault));
        token0.mint(225405015);
        IUniswapV3MintCallback(address(vault)).uniswapV3MintCallback(2000, 0, "0x");
    }

    // Manually call actions that execute would call
    function test_mimicExecute() public {
        vm.prank(address(vault));
        token0.mint(225405015);
        vm.prank(address(vault));
        pool.mint(address(vault), 192240, 192300, 1123945184648211, new bytes(0));

        vm.prank(address(vault));
        pool.burn(192240, 192300, 1123945184648211);

        (, int24 tick,,,,,) = IUniswapV3Pool(address(pool)).slot0();
        console.log("TICK", uint256(int256(tick)));

        vm.prank(address(vault));
        token0.mint(1123945184648211);
        vm.prank(address(vault));
        token1.mint(1123945185648211);

        vm.prank(address(vault));
        // pool.mint(address(vault), 92240, 92300, 1123945184648211, new bytes(0));
        // pool.mint(address(vault), 92199, 92299, 1123945184648211, new bytes(0));
        pool.mint(address(vault), 92143, 92203, 1000, new bytes(0));
    }

    function test_execute() public {
        vm.prank(address(vault));
        token0.mint(225405015);
        vm.prank(address(vault));
        pool.mint(address(vault), 192240, 192300, 1123945184648211, new bytes(0));

        vm.prank(address(vault));
        token0.mint(9999999999999);
        vm.prank(address(vault));
        token1.mint(9999999999999);
        require(vault.execute(proof, publicSignals), "Execute failed");
    }
}
