// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.6;
pragma abicoder v2;

import "forge-std/Test.sol";
import "../src/StrategyVault.sol";
import "@uniswap/v3-core/contracts/UniswapV3Pool.sol";
import "@uniswap/v3-core/contracts/UniswapV3Factory.sol";
import "@uniswap/v3-core/contracts/libraries/TickMath.sol";
import "./TestERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract StrategyVaultTest is Test {
    uint256[24] proof = [
        0x134d03f61f61fbf0ed4456b4a3f4fe62a8b5ac6beb074685cb36c481ad74c59b,
        0x2a70b50497b935305ea48ceb696f2b68245b75b2281b38f1d59239f3bfb0b700,
        0x1e6450cebca396c39f2cb239f35bf65eb2e0f8dfee6b5d3d38056dcbe442c3ef,
        0x105fe3ad6a6d5bf7a2f4e6a333f80726f66d2d2b4b01b54ff64cffd763708369,
        0x2c8723206f7f6fbe42163627a3d2a03066826f88978eb8865acc7d9be35ca685,
        0x1acc02bb69c7f7e92f15b16f2e18b0b58542e29df16b43cc49e6903a601f67fb,
        0x0d49d7e4f3dca32b25656da9d74e14bc91f1ac6741ecc0c064e6c3ac5fc19e5d,
        0x044133bbca7df16a5b455b42f0ba5016019df71534a8cfc9a6404be633a6f1d4,
        0x03dc868c0a2cfc64c8329340d97211a257a8717804bbffb3ad212b5fb830e212,
        0x260b168a9b9ce586376fc7ea1e8771f2ad0790c7001319c41dd44a87f379e30e,
        0x10dfc8fe3a209d9111f612c5993513a01e786e8b65d757e6c520641400777d6f,
        0x08b8826f3a17d57cda592409c680db8d793fa57d9a3f8960e8422b7dda3524cf,
        0x2097135402eec9f9af5ba6aa92cfcd7b9781e6ab93c288a7e4f322896326b56e,
        0x0863d6eea75266fa625b937c66004fb1531e888acb4396157c98fe0911328785,
        0x23e0ac5ba7fd4a5564c373fcddb3f4794999ef75e1208d068f331466bc2d8e94,
        0x26e69972a2e47dc5f1b6c0d53b5547af7ea189f72a8f201301dfad11179c739a,
        0x03fdc9a27dcb7138e5f7a2f30b7f3b344d396887ac46efcd121401ff39dfaf82,
        0x23ac9adb2a36bb8c5bce13d82a7bb5159ab501a6c7ebb3fac139ae05a49a78b2,
        0x0289b5c84e683ce12715efdf4ec7cf02878be342422438c60b7cb4177e13aaab,
        0x14ccacf46c92518779278453c9933955aa428b2d2a150290f823c1e8b61ebe4d,
        0x17d1c02a0d552ecf5b3229972ccc22a530ada7c37334b11826c2b50ecc1a2099,
        0x071316aa3ce7a1d3d7da5756b9c67bf59931bc0714ca917973c09ec6e5ff7905,
        0x12f7b937f76831dcf18a962f485f6607ba111b9abdbfc4f19fac26b883656f3e,
        0x0a273949ba208cdfd9fba78b307514c8286f77a3ae5e81e3fbb36c5e357a20e8
    ];

    uint256[36] publicSignals = [
        0x0000000000000000000000000000000000000000000000000000000000000002,
        0x000000000000000000000000000000000000000000000000000000000002eef0,
        0x000000000000000000000000000000000000000000000000000000000002ef2c,
        0x0000000000000000000000000000000000000000000000000003fe38e17a5c13,
        0x0000000000000000000000000000000000000000000000000000000000000001,
        0x0000000000000000000000000000000000000000000000000000000000016b48,
        0x0000000000000000000000000000000000000000000000000000000000016b84,
        0x0000000000000000000000000000000000000000000000000003fe38e1899e53,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000000000,
        0x0000000000000000000000000000000000000000000000000000000000016b48,
        0x000000000000000000000000000000000000000000000000000000000002eef0,
        0x0000000000000000000000000000000000000000000000000003fe38e17a5c13,
        0x00000000000000000000000000000000000000000000000000000000000f4240
    ];

    StrategyVault vault;
    PlonkVerifier verifier;
    UniswapV3Factory factory;
    UniswapV3PoolDeployer deployer;
    UniswapV3Pool pool;
    Token0 token0;
    Token1 token1;

    function setUp() public {
        factory = new UniswapV3Factory();
        token0 = new Token0();
        token1 = new Token1();
        pool = UniswapV3Pool(factory.createPool(address(token0), address(token1), 3000));
        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(93000);
        // Match tick from public signals
        pool.initialize(sqrtPriceX96);

        verifier = new PlonkVerifier();
        vault = new StrategyVault(address(verifier), address(pool), address(token0), address(token1));
    }

    function test_verifyActions() public view {
        vault.verifyActions(proof, publicSignals);
    }

    function test_callback() public {
        vm.prank(address(vault));
        token0.mint(225405015);
        IUniswapV3MintCallback(address(vault)).uniswapV3MintCallback(2000, 0, "0x");
    }

    function test_execute() public {
        vm.prank(address(vault));
        token0.mint(225405015);
        vm.prank(address(vault));
        pool.mint(address(vault), 192240, 192300, 1123945184648211, new bytes(0));

        vm.prank(address(vault));
        token0.mint(32197714999);
        require(vault.execute(proof, publicSignals), "Execute failed");
    }
}
